// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	dataSchema "github.com/project-eria/go-wot/dataSchema"
	mock "github.com/stretchr/testify/mock"

	producer "github.com/project-eria/go-wot/producer"
)

// ExposedProperty is an autogenerated mock type for the ExposedProperty type
type ExposedProperty struct {
	mock.Mock
}

// CheckUriVariables provides a mock function with given fields: _a0
func (_m *ExposedProperty) CheckUriVariables(_a0 map[string]string) (map[string]interface{}, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CheckUriVariables")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(map[string]string) (map[string]interface{}, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(map[string]string) map[string]interface{}); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(map[string]string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Data provides a mock function with given fields:
func (_m *ExposedProperty) Data() dataSchema.DataSchema {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Data")
	}

	var r0 dataSchema.DataSchema
	if rf, ok := ret.Get(0).(func() dataSchema.DataSchema); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dataSchema.DataSchema)
		}
	}

	return r0
}

// GetObserveHandler provides a mock function with given fields:
func (_m *ExposedProperty) GetObserveHandler() producer.PropertyObserveHandler {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetObserveHandler")
	}

	var r0 producer.PropertyObserveHandler
	if rf, ok := ret.Get(0).(func() producer.PropertyObserveHandler); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(producer.PropertyObserveHandler)
		}
	}

	return r0
}

// GetObserverSelectorHandler provides a mock function with given fields:
func (_m *ExposedProperty) GetObserverSelectorHandler() producer.ObserverSelectorHandler {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetObserverSelectorHandler")
	}

	var r0 producer.ObserverSelectorHandler
	if rf, ok := ret.Get(0).(func() producer.ObserverSelectorHandler); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(producer.ObserverSelectorHandler)
		}
	}

	return r0
}

// IsObservable provides a mock function with given fields:
func (_m *ExposedProperty) IsObservable() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsObservable")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Read provides a mock function with given fields: _a0, _a1, _a2
func (_m *ExposedProperty) Read(_a0 producer.ExposedThing, _a1 string, _a2 map[string]string) (interface{}, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(producer.ExposedThing, string, map[string]string) (interface{}, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(producer.ExposedThing, string, map[string]string) interface{}); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(producer.ExposedThing, string, map[string]string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetObserveHandler provides a mock function with given fields: _a0
func (_m *ExposedProperty) SetObserveHandler(_a0 producer.PropertyObserveHandler) {
	_m.Called(_a0)
}

// SetObserverSelectorHandler provides a mock function with given fields: _a0
func (_m *ExposedProperty) SetObserverSelectorHandler(_a0 producer.ObserverSelectorHandler) {
	_m.Called(_a0)
}

// SetReadHandler provides a mock function with given fields: _a0
func (_m *ExposedProperty) SetReadHandler(_a0 producer.PropertyReadHandler) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SetReadHandler")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(producer.PropertyReadHandler) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetWriteHandler provides a mock function with given fields: _a0
func (_m *ExposedProperty) SetWriteHandler(_a0 producer.PropertyWriteHandler) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SetWriteHandler")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(producer.PropertyWriteHandler) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Write provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *ExposedProperty) Write(_a0 producer.ExposedThing, _a1 string, _a2 interface{}, _a3 map[string]string) error {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(producer.ExposedThing, string, interface{}, map[string]string) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewExposedProperty creates a new instance of ExposedProperty. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExposedProperty(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExposedProperty {
	mock := &ExposedProperty{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
