// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// ObserverSelectorHandler is an autogenerated mock type for the ObserverSelectorHandler type
type ObserverSelectorHandler struct {
	mock.Mock
}

// Execute provides a mock function with given fields: _a0, _a1
func (_m *ObserverSelectorHandler) Execute(_a0 map[string]string, _a1 map[string]string) bool {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(map[string]string, map[string]string) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewObserverSelectorHandler creates a new instance of ObserverSelectorHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewObserverSelectorHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *ObserverSelectorHandler {
	mock := &ObserverSelectorHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
